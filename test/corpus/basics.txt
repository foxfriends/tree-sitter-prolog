===================
Basic m-expressions
===================

foo(X, bar) :-
  true.

---

(source_file
  (predicate_definition
    head: (term
        functor: (atom)
         arguments: (values
                       (var)
                       (atom)))
    body:
    (values
      (primitive))))

==============================
Top-level directives & queries
==============================

:- module(test, []).


foo(bar, X) :- true.

?- foo(bar, 10), foo(baz, Ydf).

---

(source_file
  (directive
    (values
      (term
        functor: (atom)
        arguments: (values
          (atom)
          (list)))))
  (predicate_definition
    head: (term
      functor: (atom)
      arguments: (values
        (atom)
        (var)))
    body: (values
      (primitive)))
  (query
    (values
      (term
        functor: (atom)
        arguments: (values
          (atom)
          (number)))
      (term
        functor: (atom)
        arguments: (values
          (atom)
          (var))))))

============
Dictionaries
============

?- X = _{a: 1, b: [2,3,4], c: foo{d: 5}}.

---

(source_file
  (query
    (values
     (binary_op
       lhs: (var)
       operator: (atom)
       rhs: (dict
         tag: (var)
         entries: (dict_entries
           (dict_entry
             key: (atom)
             value: (number))
           (dict_entry
             key: (atom)
             value: (list (values (number) (number) (number))))
           (dict_entry
             key: (atom)
             value: (dict
                tag: (atom)
                entries: (dict_entries
                   (dict_entry key: (atom) value: (number)))))))))))

==============
Various values
==============

?- write([1, 0'., 0' , 0',, 5]).

---

(source_file
  (query
    (values
      (term
        functor: (atom)
        arguments:
        (values
          (list
            (values
              (number)
              (char_code)
              (char_code)
              (char_code)
              (number))))))))

==========================
Module with predicate name
==========================

:- module(foo, [bar/3, baz/0]).

---

(source_file
  (directive
    (values
      (term
        functor: (atom)
        arguments: (values
          (atom)
          (list
           (values
            (binary_op
              lhs: (atom)
              operator: (atom)
              rhs: (number))
            (binary_op
              lhs: (atom)
              operator: (atom)
              rhs: (number)))))))))

===================
Strings with escape
===================

?- _ = "foo\"bar".

---

(source_file (query (values (binary_op lhs: (var) operator: (atom) rhs: (string (escape_sequence))))))


========
Comments
========

:- module(hello, []).
/** <module> doc comment

  multi-line
  comment
*/

/* foo */

foo(x).
% Also single-line comment
foo(y, % inline comment
    5 % beep
).

---

(source_file
 (directive
  (values
   (term
     functor: (atom)
     arguments: (values (atom) (list)))))
  (comment)
  (comment)
  (predicate_definition head: (term functor: (atom) arguments: (values (atom))))
  (comment)
  (predicate_definition
    head: (term
       functor: (atom)
       arguments: (values
         (atom) (comment)
         (number))
    (comment))))

=========
Operators
=========

:- module(hello, [foo/3, bar//1]).

:- use_module(beep, [bar/3 as beep_bar, quux//3]).

foo(X, Y, Z) :- Z is 1 + Y.

bar(A, B, C) :- A #= B + C.

---

(source_file
  (directive
    (values
      (term
       functor: (atom)
       arguments:
        (values
         (atom)
         (list (values (binary_op lhs: (atom) operator: (atom) rhs: (number))
                       (binary_op lhs: (atom) operator: (atom) rhs: (number))))))))
  (directive
    (values
      (term
       functor: (atom)
       arguments:
        (values
         (atom)
         (list (values (binary_op
                         lhs: (binary_op lhs: (atom) operator: (atom) rhs: (number))
                         operator: (atom)
                         rhs: (atom))
                       (binary_op lhs: (atom) operator: (atom) rhs: (number))))))))

  (predicate_definition
    head: (term functor: (atom) arguments: (values (var) (var) (var)))
    body: (values
           (binary_op lhs: (var) operator: (atom)
             rhs: (binary_op lhs: (number) operator: (atom) rhs: (var)))))

  (predicate_definition
    head: (term functor: (atom) arguments: (values (var) (var) (var)))
    body: (values
           (binary_op lhs: (var) operator: (atom)
             rhs: (binary_op lhs: (var) operator: (atom) rhs: (var))))))

=========================
Module names with slashes
=========================

:- use_module(foo/bar, []).

---

(source_file
  (directive
   (values
    (term
      functor: (atom)
      arguments: (values
        (binary_op lhs: (atom) operator: (atom) rhs: (atom))
        (list))))))

============
Code strings
============

foo(`bar`).

---

(source_file
  (predicate_definition
    head: (term functor: (atom) arguments: (values (codes)))))
