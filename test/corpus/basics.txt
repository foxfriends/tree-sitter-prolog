===================
Basic m-expressions
===================

foo(X, bar) :-
  true.

---

(source_file
  (predicate_definition
    head: (term
        functor: (atom)
         arguments: (values
                       (var)
                       (atom)))
    body:
    (values
      (atom))))

==============================
Top-level directives & queries
==============================

:- module(test, []).


foo(bar, X) :- true.

?- foo(bar, 10), foo(baz, Ydf).

---

(source_file
  (directive
    (values
      (term
        functor: (atom)
        arguments: (values
          (atom)
          (list)))))
  (predicate_definition
    head: (term
      functor: (atom)
      arguments: (values
        (atom)
        (var)))
    body: (values
      (atom)))
  (query
    (values
      (term
        functor: (atom)
        arguments: (values
          (atom)
          (number)))
      (term
        functor: (atom)
        arguments: (values
          (atom)
          (var))))))

============
Dictionaries
============

?- X = _{a: 1, b: [2,3,4], c: foo{d: 5}}.

---

(source_file
  (query
    (values
     (binary_op
       lhs: (var)
       operator: (atom)
       rhs: (dict
         tag: (var)
         entries: (dict_entries
           (dict_entry
             key: (atom)
             value: (number))
           (dict_entry
             key: (atom)
             value: (list (values (number) (number) (number))))
           (dict_entry
             key: (atom)
             value: (dict
                tag: (atom)
                entries: (dict_entries
                   (dict_entry key: (atom) value: (number)))))))))))

==============
Various values
==============

?- write([1, 0'., 0' , 0',, 0'\n, 5]).

---

(source_file
  (query
    (values
      (term
        functor: (atom)
        arguments:
        (values
          (list
            (values
              (number)
              (char_code)
              (char_code)
              (char_code)
              (char_code)
              (number))))))))

==========================
Module with predicate name
==========================

:- module(foo, [bar/3, baz/0, (',')/3, (;)/3]).

---

(source_file
  (directive
    (values
      (term
        functor: (atom)
        arguments: (values
          (atom)
          (list
           (values
            (binary_op
              lhs: (atom)
              operator: (atom)
              rhs: (number))
            (binary_op
              lhs: (atom)
              operator: (atom)
              rhs: (number))
            (binary_op
              lhs: (parenthesized (values (atom)))
              operator: (atom)
              rhs: (number))
            (binary_op
              lhs: (parenthesized (values (atom)))
              operator: (atom)
              rhs: (number)))))))))

===================
Strings with escape
===================

?- _ = "foo\"bar".

---

(source_file (query (values (binary_op lhs: (var) operator: (atom) rhs: (string)))))


========
Comments
========

:- module(hello, []).
/** <module> doc comment

  multi-line
  comment
*/

/* foo */

foo(x).
% Also single-line comment
foo(y, % inline comment
    5 % beep
).

---

(source_file
 (directive
  (values
   (term
     functor: (atom)
     arguments: (values (atom) (list)))))
  (comment)
  (comment)
  (predicate_definition head: (term functor: (atom) arguments: (values (atom))))
  (comment)
  (predicate_definition
    head: (term
       functor: (atom)
       arguments: (values
         (atom) (comment)
         (number))
    (comment))))

=========
Operators
=========

:- module(hello, [foo/3, bar//1]).

:- use_module(beep, [bar/3 as beep_bar, quux//3]).

foo(X, Y, Z) :- Z is 1 + Y.

bar(A, B, C) :- A #= B + C.

---

(source_file
  (directive
    (values
      (term
       functor: (atom)
       arguments:
        (values
         (atom)
         (list (values (binary_op lhs: (atom) operator: (atom) rhs: (number))
                       (binary_op lhs: (atom) operator: (atom) rhs: (number))))))))
  (directive
    (values
      (term
       functor: (atom)
       arguments:
        (values
         (atom)
         (list (values (binary_op
                         lhs: (binary_op lhs: (atom) operator: (atom) rhs: (number))
                         operator: (atom)
                         rhs: (atom))
                       (binary_op lhs: (atom) operator: (atom) rhs: (number))))))))

  (predicate_definition
    head: (term functor: (atom) arguments: (values (var) (var) (var)))
    body: (values
           (binary_op lhs: (var) operator: (atom)
             rhs: (binary_op lhs: (number) operator: (atom) rhs: (var)))))

  (predicate_definition
    head: (term functor: (atom) arguments: (values (var) (var) (var)))
    body: (values
           (binary_op lhs: (var) operator: (atom)
             rhs: (binary_op lhs: (var) operator: (atom) rhs: (var))))))

=========================
Module names with slashes
=========================

:- use_module(foo/bar, []).

---

(source_file
  (directive
   (values
    (term
      functor: (atom)
      arguments: (values
        (binary_op lhs: (atom) operator: (atom) rhs: (atom))
        (list))))))

============
Code strings
============

foo(`bar`).

---

(source_file
  (predicate_definition
    head: (term functor: (atom) arguments: (values (codes)))))

========
Dict get
========

?- X = _{a: 1}.a.
?- D = #{a: "foo"}, X = D.a.
?- D = foo{a: []}, K = a, X = D.K.

---

(source_file
  (query
    (values
      (binary_op
        lhs: (var) operator: (atom)
        rhs:
        (dict_operator
          (dict tag: (var) entries: (dict_entries (dict_entry key: (atom) value: (number))))
          (atom)))))

  (query
    (values
      (binary_op
        lhs: (var) operator: (atom)
        rhs:
        (dict tag: (atom) entries: (dict_entries (dict_entry key: (atom) value: (string)))))
      (binary_op lhs: (var) operator: (atom) rhs: (dict_operator (var) (atom)))))

  (query
    (values
      (binary_op
        lhs: (var) operator: (atom)
        rhs:
        (dict tag: (atom) entries: (dict_entries (dict_entry key: (atom) value: (list)))))
      (binary_op lhs: (var) operator: (atom) rhs: (atom))
      (binary_op lhs: (var) operator: (atom) rhs: (dict_operator (var) (var)))))

)

==============
Dict Operators
==============

?- X = _{a: 1}.put(k, [1, 2]).

---

(source_file
  (query
    (values
      (binary_op lhs: (var)
        operator: (atom)
        rhs: (dict_operator
          (dict tag: (var)
            entries: (dict_entries
              (dict_entry key: (atom) value: (number))))
           (term functor: (atom)
             arguments:
             (values
              (atom)
              (list (values (number) (number))))))))))

====================
Parenthesized Values
====================

?- X = (a, b, c).

---

(source_file
  (query
    (values
     (binary_op
       lhs: (var)
       operator: (atom)
       rhs: (parenthesized (values (atom) (atom) (atom)))))))

=======
Lambdas
=======

?- maplist([X,X]>>true, [1,2,3], L).

---

(source_file
  (query
    (values
      (term
        functor: (atom)
        arguments:
        (values
          (binary_op
            lhs: (list (values (var) (var)))
            operator: (atom)
            rhs: (atom))
          (list (values (number) (number) (number)))
          (var))))))

=====================
Lambdas with closures
=====================

?- Y = 3, maplist({Y}/[X,Z]>>(Z is X + Y), [1,2,3], L).

---

(source_file
  (query
    (values
      (binary_op lhs: (var) operator: (atom) rhs: (number))
      (term
        functor: (atom)
        arguments:
        (values
          (binary_op
            lhs: (binary_op
              lhs: (curly_braced (values (var)))
              operator: (atom)
              rhs: (list (values (var) (var))))
            operator: (atom)
            rhs:
            (parenthesized
             (values
              (binary_op lhs: (var) operator: (atom)
                rhs: (binary_op lhs: (var) operator: (atom) rhs: (var))))))
          (list (values (number) (number) (number)))
          (var))))))

===============================
Lambdas with multi-var closures
===============================

?- Y = 3, maplist({Y,A}/[X,Z]>>(Z is X + Y), [1,2,3], L).

---

(source_file
  (query
    (values
      (binary_op lhs: (var) operator: (atom) rhs: (number))
      (term
        functor: (atom)
        arguments:
        (values
          (binary_op
            lhs: (binary_op
                   lhs: (curly_braced (values (var) (var)))
                   operator: (atom)
                   rhs: (list (values (var) (var))))
            operator: (atom)
            rhs:
            (parenthesized
             (values
              (binary_op lhs: (var) operator: (atom)
                rhs: (binary_op lhs: (var) operator: (atom) rhs: (var))))))
          (list (values (number) (number) (number)))
          (var))))))

===========================
Lambdas with empty closures
===========================

?- Y = 3, maplist({}/[X,Z]>>(Z is X + Y), [1,2,3], L).

---

(source_file
  (query
    (values
      (binary_op lhs: (var) operator: (atom) rhs: (number))
      (term
        functor: (atom)
        arguments:
        (values
          (binary_op
            lhs: (binary_op
                   lhs: (curly_braced)
                   operator: (atom)
                   rhs: (list (values (var) (var))))
            operator: (atom)
            rhs:
            (parenthesized
             (values
              (binary_op lhs: (var) operator: (atom)
                rhs: (binary_op lhs: (var) operator: (atom) rhs: (var))))))
          (list (values (number) (number) (number)))
          (var))))))

===============
Unary operators
===============

?- \+ foo.

---

(source_file
  (query (values (unary_op operator: (atom) rhs: (atom)))))

=======================
Using module qualifiers
=======================

?- foo:bar(5).

---

(source_file
  (query (values (binary_op lhs: (atom) operator: (atom)
                   rhs: (term functor: (atom) arguments: (values (number)))))))

============================
Terms with module qualifiers
============================

user:term_expansion(foo, bar, baz).

---

(source_file (predicate_definition
  module: (atom)
  head:
    (term
      functor: (atom)
      arguments: (values (atom) (atom) (atom)))))

=====================================
Unary operator with DCG name argument
=====================================

:- multifile prolog:message//1.

---

(source_file
  (directive
    (values
     (unary_op
       operator: (atom)
       rhs: (binary_op
              lhs: (atom)
              operator: (atom)
              rhs: (binary_op
                     lhs: (atom)
                     operator: (atom)
                     rhs: (number)))))))

===========================
Strings with %-sign in them
===========================

?- format_time(string(Ds), "%", Date).

---

(source_file
  (query
    (values
      (term
        functor: (atom)
        arguments: (values
          (term functor: (atom)
                arguments: (values (var)))
          (string)
          (var))))))

================================
Code Strings with %-sign in them
================================

?- format_time(string(Ds), `%`, Date).

---

(source_file
  (query
    (values
      (term
        functor: (atom)
        arguments: (values
          (term functor: (atom)
                arguments: (values (var)))
          (codes)
          (var))))))

=================
Atoms with escape
=================

?- X = 'stuff\'s cool'.

---

(source_file
  (query (values (binary_op lhs: (var) operator: (atom) rhs: (atom)))))

===============
Dotdot operator
===============

?- [X, Y] ins 0..100.

---

(source_file
 (query
  (values
   (binary_op
     lhs: (list (values (var) (var)))
     operator: (atom)
     rhs: (binary_op lhs: (number) operator: (atom) rhs: (number))))))

=================
Dotdot operator 2
=================

?- Z ins 0..100.

---

(source_file
 (query
  (values
   (binary_op
     lhs: (var)
     operator: (atom)
     rhs: (binary_op lhs: (number) operator: (atom) rhs: (number))))))

======================
Numbers with groupings
======================

?- [1_000_000, 0x8f_00, 0b1111_0000, 13'12_34, -12r333_333, 1e9].

---

(source_file
  (query
    (values
      (list
       (values
        (number)
        (number)
        (number)
        (number)
        (number)
        (number))))))

============
Symbol atoms
============

:- meta_predicate http2_request(+, -, ?, 2).

---

(source_file
  (directive
    (values
      (unary_op
        operator: (atom)
        rhs: (term functor: (atom)
               arguments: (values (atom) (atom) (atom) (number)))))))

=================
More Symbol Atoms
=================

?- sort(2, @>=, Counts, FreqOrdered_).

---

(source_file
 (query
  (values
    (term
      functor: (atom)
      arguments: (values (number) (atom) (var) (var))))))

======================
Even More Symbol Atoms
======================

:- http_handler(root(.), todo_handler, []).

---

(source_file
  (directive
    (values
      (term functor: (atom)
        arguments: (values
          (term functor: (atom) arguments: (values (atom)))
          (atom)
          (list))))))

===
Hm?
===

pkcs7(BSize, Data, PaddedData) :-
    length(Data, L),
    Pad #= BSize - (L mod BSize),
    replicate(Pad, Pad, Padding),
    append(Data, Padding, PaddedData), !.

---

(source_file
  (predicate_definition
    head: (term functor: (atom) arguments: (values (var) (var) (var)))
    body:
    (values
     (term functor: (atom) arguments: (values (var) (var)))
     (binary_op lhs: (var) operator: (atom)
       rhs: (binary_op lhs: (var) operator: (atom)
             rhs: (parenthesized (values (binary_op lhs: (var) operator: (atom) rhs: (var))))))
     (term functor: (atom) arguments: (values (var) (var) (var)))
     (term functor: (atom) arguments: (values (var) (var) (var)))
     (atom))))

====================
Complex Definition 1
====================

int_bytes_le(I, B) :-
    foldl([E, P0-I0, P-I]>>(
              E in 0..255,
              I #= I0 + E * 256^P0,
              P #= P0 + 1),
         B, 0-0, _-I).

---

(source_file
 (predicate_definition
   head: (term functor: (atom) arguments: (values (var) (var)))
   body:
    (values
     (term functor: (atom)
      arguments:
      (values
       (binary_op
         lhs: (list
               (values
                (var)
                (binary_op lhs: (var) operator: (atom) rhs: (var))
                (binary_op lhs: (var) operator: (atom) rhs: (var))))
         operator: (atom)
         rhs: (parenthesized
          (values
            (binary_op lhs: (var)
              operator: (atom)
              rhs: (binary_op lhs: (number) operator: (atom)
                              rhs: (number)))
            (binary_op lhs: (var)
              operator: (atom)
              rhs:
               (binary_op lhs: (var) operator: (atom)
                    rhs: (binary_op lhs: (var) operator: (atom)
                           rhs: (binary_op lhs: (number)
                                   operator: (atom)
                                   rhs: (var)))))
           (binary_op lhs: (var) operator: (atom)
             rhs: (binary_op lhs: (var) operator: (atom) rhs: (number))))))
      (var)
      (binary_op lhs: (number) operator: (atom) rhs: (number))
      (binary_op lhs: (var) operator: (atom) rhs: (var)))))))

=================
Chaining Dict Get
=================

?- Foo.bar.baz.

---

(source_file
 (query
  (values
   (dict_operator
     (dict_operator (var) (atom))
     (atom)))))

============
Defining Ops
============

:- op(900, fy, [$]).

---

(source_file
 (directive
  (values
   (term
     functor: (atom)
     arguments: (values (number) (atom) (list (values (atom))))))))

===========
Test Syntax
===========

test(foo, [ true(Bar == 'baz' )]) :- beep(Bar).

---

(source_file
 (predicate_definition
  head: (term functor: (atom)
          arguments:
          (values
            (atom)
            (list
             (values (term functor: (atom)
                       arguments: (values
                           (binary_op lhs: (var)
                             operator: (atom)
                             rhs: (atom))))))))
  body: (values (term functor: (atom) arguments: (values (var))))))

======================
Findall with qualifier
======================

?- findall(X, Y^(x(X, Y)), Xs).

---

(source_file
 (query
  (values
    (term functor: (atom)
      arguments:
      (values
        (var)
        (binary_op
          lhs: (var)
          operator: (atom)
          rhs: (parenthesized (values
                 (term functor: (atom)
                   arguments: (values (var) (var))))))
        (var))))))

===========
Quasiquotes
===========

beep :-
  include_js(script(type('text/javascript')),
    {|javascript(S, V)||
      let stuff = "hello world";
      console.log("state", S, V);
    |}, 123).

---

(source_file
 (predicate_definition
  head: (atom)
  body:
  (values
   (term
     functor: (atom)
     arguments:
      (values
        (term
           functor: (atom)
           arguments: (values (term functor: (atom) arguments: (values (atom)))))
        (quasiquote
          syntax: (term functor: (atom) arguments: (values (var) (var)))
          quotation: (string))
        (number))))))

=====================
Backslash as unary op
=====================

login_handler(_Request) :-
    reply_html_page(
        [title('Test Server')],
        \login_body).

---

(source_file
 (predicate_definition
  head: (term functor: (atom) arguments: (values (var)))
  body:
  (values
   (term functor: (atom)
     arguments: (values
       (list (values (term functor: (atom) arguments: (values (atom)))))
       (unary_op operator: (atom) rhs: (atom)))))))

===============================
Handle dict op in tail position
===============================

?- Meals = [NewMeal|State0.meals].

---

(source_file
 (query
  (values
   (binary_op
     lhs: (var)
     operator: (atom)
     rhs: (list (values (var))
             tail: (dict_operator (var) (atom)))))))
