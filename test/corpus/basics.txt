===================
Basic m-expressions
===================

foo(X, bar) :-
  true.

---

(source_file
  (predicate_definition
    head: (term
        functor: (atom)
         arguments: (values
                       (var)
                       (atom)))
    body:
    (values
      (primitive))))

==============================
Top-level directives & queries
==============================

:- module(test, []).


foo(bar, X) :- true.

?- foo(bar, 10), foo(baz, Ydf).

---

(source_file
  (directive
    (values
      (term
        functor: (atom)
        arguments: (values
          (atom)
          (list)))))
  (predicate_definition
    head: (term
      functor: (atom)
      arguments: (values
        (atom)
        (var)))
    body: (values
      (primitive)))
  (query
    (values
      (term
        functor: (atom)
        arguments: (values
          (atom)
          (number)))
      (term
        functor: (atom)
        arguments: (values
          (atom)
          (var))))))

============
Dictionaries
============

?- X = _{a: 1, b: [2,3,4], c: foo{d: 5}}.

---

(source_file
  (query
    (values
     (unify_op
       (var)
       (dict
         tag: (var)
         entries: (dict_entries
           (dict_entry
             key: (atom)
             value: (number))
           (dict_entry
             key: (atom)
             value: (list (values (number) (number) (number))))
           (dict_entry
             key: (atom)
             value: (dict
                tag: (atom)
                entries: (dict_entries
                   (dict_entry key: (atom) value: (number)))))))))))

==============
Various values
==============

?- write([1, 0'., 0' , 0',, 5]).

---

(source_file
  (query
    (values
      (term
        functor: (atom)
        arguments:
        (values
          (list
            (values
              (number)
              (char_code)
              (char_code)
              (char_code)
              (number))))))))

==========================
Module with predicate name
==========================

:- module(foo, [bar/3, baz/0]).

---

(source_file
  (directive
    (values
      (term
        functor: (atom)
        arguments: (values
          (atom)
          (list
           (values
            (predicate_name
              name: (atom)
              arity: (arity))
            (predicate_name
              name: (atom)
              arity: (arity)))))))))
